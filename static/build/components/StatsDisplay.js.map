{"version":3,"sources":["../../../client/src/components/StatsDisplay.jsx"],"names":["RegionalDisplay","LoadingIcon","useState","useEffect","React","apiCache","Map","routeMap","Cases","Testing","Beds","apiUrl","StatsDisplay","active","type","data","setData","error","setError","getData","url","dat","apiGet","catch","console","success","loadRegions","element","Number","summary","discharged","toLocaleString","deaths","total","totalSamplesTested","ruralBeds","urbanBeds","totalBeds","regional","get","fetch","then","x","json","set","Promise","resolve","regions","length","push","map","mapFn","t","loc","state"],"mappings":"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","sourcesContent":["import RegionalDisplay from './RegionalDisplay.js'\nimport LoadingIcon from './LoadingIcon.js'\n\nconst { useState, useEffect } = React\n\nconst apiCache = new Map()\n\n// CONSTANTS\nconst routeMap = {\n    Cases: 'stats/latest',\n    Testing: 'stats/testing/latest',\n    Beds: 'hospitals/beds'\n}\nconst apiUrl = 'https://api.rootnet.in/covid19-in/'\n\nexport default function StatsDisplay ({ active: type }) {\n    const [data, setData] = useState(null)\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        async function getData () {\n            const url = apiUrl + routeMap[type]\n            const dat = await apiGet(url).catch(console.error)\n            if (!dat || !dat.success) {\n                setError('ERROR GETTING DATA')\n            }\n            setData({ ...dat.data, type })\n        }\n        getData()\n    }, [type])\n\n    if (data && data.type === type) {\n        loadRegions(data, type)\n        let element\n        switch (type) {\n        case 'Cases': {\n            element = (<div id=\"statsHolderSmall\">\n                <div className=\"highlight\">\n                    <h1>Discharged Cases</h1>\n                    <p>{Number(data.summary.discharged).toLocaleString()}</p>\n                </div>\n\n                <div className=\"highlight\">\n                    <h1>Deaths</h1>\n                    <p>{Number(data.summary.deaths).toLocaleString()}</p>\n                </div>\n\n                <div className=\"highlight\">\n                    <h1>Total</h1>\n                    <p>{Number(data.summary.total).toLocaleString()}</p>\n                </div>\n            </div>)\n            break\n        }\n\n        case 'Testing': {\n            element = (\n                <div id=\"statsHolderSmall\">\n                    <div className=\"highlight\">\n                        <h1>Total Number of Tests</h1>\n                        <p>{Number(data.totalSamplesTested).toLocaleString()}</p>\n                    </div>\n                </div>\n            )\n            break\n        }\n\n        case 'Beds': {\n            element = (\n                <div id=\"statsHolderSmall\">\n                    <div className=\"highlight\">\n                        <h1> Rural Beds Available </h1>\n                        <p>{Number(data.summary.ruralBeds).toLocaleString()}</p>\n                    </div>\n\n                    <div className=\"highlight\">\n                        <h1> Urban Beds Available </h1>\n                        <p>{Number(data.summary.urbanBeds).toLocaleString()}</p>\n                    </div>\n\n                    <div className=\"highlight\">\n                        <h1> Total Beds Available </h1>\n                        <p> {Number(data.summary.totalBeds).toLocaleString()}</p>\n                    </div>\n                </div>\n            )\n        }\n        }\n        return (<div id=\"statsDisplayBounds\">\n            {element}\n            <RegionalDisplay type={type} dat={data.regional}/>\n        </div>\n        )\n    } else {\n        return <div>\n            <LoadingIcon />\n            { error }\n        </div>\n    }\n}\n\nfunction apiGet (url) {\n    const data = apiCache.get(url)\n    if (!data) {\n        return fetch(url).then(x => x.json()).then(x => {\n            apiCache.set(url, x)\n            return x\n        }).catch(console.error)\n    }\n    return Promise.resolve().then(() => data)\n}\n\nfunction loadRegions (data, type) {\n    if (!data?.regional) return\n    if (!regions[type]?.length) {\n        regions[type] = []\n        regions[type].push(...data.regional.map(mapFn(type)))\n    }\n}\n\nconst mapFn = (t) => t === 'Cases' ? x => x.loc : x => x.state\n"],"file":"StatsDisplay.js"}