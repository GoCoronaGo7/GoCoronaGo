{"version":3,"sources":["../../../client/src/components/HospitalDisplay.jsx"],"names":["Dropdown","LoadingIcon","SearchBar","useEffect","useState","useReducer","React","apiUrl","location","origin","cache","Map","HospitalDisplay","region","setRegion","STATS_DATA","state_names","searchQuery","hospitals","filtered","setSearchQuery","updateHospitals","error","setError","fetchedRegion","getRegionDataByName","then","resData","values","data","catch","console","display","placeItems","value","HospitalsDisplay","length","propTypes","PropTypes","array","RegionDropDown","regions","Set","map","x","area","type","object","func","isRequired","state","action","filterHospitals","Object","Error","filter","hospital_name","toLowerCase","includes","name","code","code_names","indexOf","cachedData","get","log","fetch","json"],"mappings":"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","sourcesContent":["import Dropdown from './Dropdown.js'\nimport LoadingIcon from './LoadingIcon.js'\nimport SearchBar from './SearchBar.js'\n\nconst { useEffect, useState, useReducer } = React\n\nconst apiUrl = location.origin + '/api/data'\nconst cache = new Map()\n\nexport default function HospitalDisplay () {\n    const [region, setRegion] = useState(STATS_DATA.state_names[15])\n    const [{ searchQuery, hospitals, filtered }, setSearchQuery] = useReducer(updateHospitals, { searchQuery: '', hospitals: null, filtered: null, region: null })\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        const fetchedRegion = region\n        getRegionDataByName(fetchedRegion)\n            .then(resData => {\n                resData ||= 'Failed to fetch Data'\n                if (typeof resData === 'string') return setError(resData + ', Contact a developer if the issue persists')\n                setSearchQuery({ values: resData.data, region: fetchedRegion })\n            })\n            .catch(console.error)\n    }, [region])\n\n    if (error) return <span color='red'> {error} </span>\n    if (!hospitals || hospitals.region !== region) return <div id=\"loadingDisplay\" style={{ display: 'grid', placeItems: 'center' }} > < LoadingIcon /> </div>\n    return (\n        <div id=\"display\">\n            < SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n            <div id=\"dropDown-bar\">\n                < Dropdown options={STATS_DATA.state_names} value={region} onChange={({ value }) => setRegion(value)} />\n                < RegionDropDown hospitals={hospitals} setSearchQuery={setSearchQuery} />\n            </div>\n            < HospitalsDisplay hospitals={filtered} />\n        </div>\n    )\n}\n\nfunction HospitalsDisplay ({ hospitals }) {\n    return <span color='white'> {hospitals?.length || 'No items matched'} </span>\n}\nHospitalsDisplay.propTypes = {\n    hospitals: PropTypes.array\n}\n\nfunction RegionDropDown ({ hospitals, setSearchQuery }) {\n    const [regions, setRegion] = useState(null)\n    useEffect(() => {\n        setRegion(['All Regions', ...new Set(hospitals.values.map(x => x.area))])\n    }, [hospitals])\n    if (!hospitals || !regions) return <div id=\"loadingDisplay\" style={{ display: 'grid', placeItems: 'center' }} > < LoadingIcon /> </div>\n    else return < Dropdown options={regions} value={'All Regions'} onChange={({ value }) => setSearchQuery({ type: 'region', region: value })}/>\n}\nRegionDropDown.propTypes = {\n    hospitals: PropTypes.object,\n    setSearchQuery: PropTypes.func.isRequired\n}\n\nfunction updateHospitals (state, action) {\n    // update search Query\n    if (typeof action === 'string' || !action) return { ...state, searchQuery: action, filtered: filterHospitals(state.hospitals, action, state.region) }\n    else if (action instanceof Object && action.values && action.region) return { ...state, hospitals: action, filtered: filterHospitals(action, state.searchQuery, state.region) }\n    else if (action instanceof Object && action.type === 'region' && action.region) return { ...state, region: action.region, filtered: filterHospitals(state.hospitals, state.searchQuery, action.region) }\n    else throw new Error()\n}\n\nfunction filterHospitals (hospitals, action, region) {\n    if (!hospitals || hospitals.values?.length === 0) return []\n    let filtered = hospitals.values\n    if (region && region !== 'All Regions') filtered = filtered.filter(x => x.area === region)\n    if (!action || action === '') return filtered\n\n    filtered = filtered.filter(x => x.hospital_name.toLowerCase().includes(action.toLowerCase()))\n    return filtered\n}\n\nasync function getRegionDataByName (name) {\n    const code = STATS_DATA.code_names[STATS_DATA.state_names.indexOf(name)]\n    if (!code) return 'Invalid State Name'\n    const cachedData = cache.get(code)\n    if (cachedData) return cachedData\n    console.log(`${apiUrl}?name=${code}`)\n    const data = await fetch(`${apiUrl}?name=${code}`).then(x => x.json()).catch(console.error)\n    if (!data) return 'Failed to fetch data from API'\n    return data\n}\n"],"file":"HospitalDisplay.js"}