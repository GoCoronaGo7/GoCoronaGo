{"version":3,"sources":["../../client/src/hospitals.jsx"],"names":["Dropdown","LoadingIcon","SearchBar","HospitalsDisplay","useEffect","useState","useReducer","React","apiUrl","location","origin","cache","Map","document","addEventListener","ReactDOM","render","getElementById","Hospitals","region","setRegion","STATS_DATA","state_names","searchQuery","hospitals","filtered","setSearchQuery","updateHospitals","error","setError","fetchedRegion","getRegionDataByName","then","resData","data","sort","a","b","available_beds_with_oxygen","values","catch","console","display","placeItems","value","RegionDropDown","regions","Set","map","x","area","type","propTypes","PropTypes","object","func","isRequired","state","action","filterHospitals","Object","Error","length","filter","hospital_name","toLowerCase","includes","name","code","code_names","indexOf","cachedData","get","fetch","json","set"],"mappings":"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","sourcesContent":["import Dropdown from './components/Dropdown.js'\nimport LoadingIcon from './components/LoadingIcon.js'\nimport SearchBar from './components/SearchBar.js'\nimport HospitalsDisplay from './components/HospitalDisplay.js'\n\nconst { useEffect, useState, useReducer } = React\n\nconst apiUrl = location.origin + '/api/data/'\nconst cache = new Map()\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    ReactDOM.render(<Hospitals />, document.getElementById('root'))\n})\n\nfunction Hospitals () {\n    const [region, setRegion] = useState(STATS_DATA.state_names[15])\n    const [{ searchQuery, hospitals, filtered }, setSearchQuery] = useReducer(updateHospitals, { searchQuery: '', hospitals: null, filtered: null, region: null })\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        const fetchedRegion = region\n        getRegionDataByName(fetchedRegion)\n            .then(resData => {\n                resData ||= 'Failed to fetch Data'\n                if (typeof resData === 'string') return setError(resData + ', Contact a developer if the issue persists')\n                resData.data = resData.data.sort((a, b) => b.available_beds_with_oxygen - a.available_beds_with_oxygen)\n                setSearchQuery({ values: resData.data, region: fetchedRegion })\n            })\n            .catch(console.error)\n    }, [region])\n\n    if (error) return <span color='red'> {error} </span>\n    if (!hospitals || hospitals.region !== region) return <div id=\"loadingDisplay\" style={{ display: 'grid', placeItems: 'center' }} > < LoadingIcon /> </div>\n    return (\n        <div id=\"display\">\n            < SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n            <div id=\"dropDown-bar\">\n                < Dropdown options={STATS_DATA.state_names} value={region} onChange={({ value }) => setRegion(value)} />\n                < RegionDropDown hospitals={hospitals} setSearchQuery={setSearchQuery} />\n            </div>\n            < HospitalsDisplay hospitals={filtered } />\n        </div>\n    )\n}\n\nfunction RegionDropDown ({ hospitals, setSearchQuery }) {\n    const [regions, setRegion] = useState(null)\n    useEffect(() => {\n        setRegion(['All Regions', ...new Set(hospitals.values.map(x => x.area || 'NA'))])\n    }, [hospitals])\n    if (!hospitals || !regions) return <div id=\"loadingDisplay\" style={{ display: 'grid', placeItems: 'center' }} > < LoadingIcon /> </div>\n    else return < Dropdown options={regions} value={'All Regions'} onChange={({ value }) => setSearchQuery({ type: 'region', region: value })} />\n}\nRegionDropDown.propTypes = {\n    hospitals: PropTypes.object,\n    setSearchQuery: PropTypes.func.isRequired\n}\n\nfunction updateHospitals (state, action) {\n    // update search Query\n    if (typeof action === 'string' || !action) return { ...state, searchQuery: action, filtered: filterHospitals(state.hospitals, action, state.region) }\n    else if (action instanceof Object && action.values && action.region) return { ...state, hospitals: action, filtered: filterHospitals(action, state.searchQuery, state.region) }\n    else if (action instanceof Object && action.type === 'region' && action.region) return { ...state, region: action.region, filtered: filterHospitals(state.hospitals, state.searchQuery, action.region) }\n    else throw new Error()\n}\n\nfunction filterHospitals (hospitals, action, region) {\n    if (!hospitals || hospitals.values?.length === 0) return []\n    let filtered = hospitals.values\n    if (region && region !== 'All Regions') filtered = filtered.filter(x => x.area === region)\n    if (!action || action === '') return filtered\n\n    filtered = filtered.filter(x => x.hospital_name.toLowerCase().includes(action.toLowerCase()))\n    return filtered\n}\n\nasync function getRegionDataByName (name) {\n    const code = STATS_DATA.code_names[STATS_DATA.state_names.indexOf(name)]\n    if (!code) return 'Invalid State Name'\n    const cachedData = cache.get(code)\n    if (cachedData) return cachedData\n    const data = fetch(`${apiUrl}?name=${code}`).then(x => x.json()).catch(console.error)\n    cache.set(code, data)\n    if (!data) return 'Failed to fetch data from API'\n\n    return await data\n}\n\n//  FETCH TO CACHE\ngetRegionDataByName(STATS_DATA.state_names[15])\n"],"file":"hospitals.js"}